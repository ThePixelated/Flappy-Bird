/* autogenerated by Processing revision 1293 on 2024-02-25 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class fpb_main extends PApplet {

class FlappyBird {
  boolean[] keyInput;
  boolean pauseStage;
  boolean gameplayStage;
  boolean startMenuStage;
  boolean initialState; // bruhh gua lupa ini buat apa, tapi kalo diapus rusak, diemin aja 
  boolean restartStage;
  boolean saveScoreStage;
  boolean xMouseCheck;
  boolean yMouseCheck;
  final int manyPipes = 3;
  
  FlappyBird() {
    gameInitialState();
  }
  
  public void update() {
    xMouseCheck = mouseX >= display.xScreen && mouseX <= display.xScreen + display.screenWidth;
    yMouseCheck = mouseY >= 0 && mouseY <= height;
  }
  
  public void gameInitialState() {
    this.keyInput = new boolean[3];
    this.gameplayStage = false;
    this.startMenuStage = true;
    this.initialState = false;
    this.restartStage = false;
    this.pauseStage = false;
    this.keyInput[2] = true;
    this.saveScoreStage = false;
  }
}

FlappyBird flappyBird;
Display display;
Ground ground;
Pipes[] pipes;
Score score;
Bird bird;

Button hsbtn;
Button plybtn;
Button rstbtn;
Button addsbtn;
Button extbtn1;
Button extbtn2;
Button pausebtn;
Button mmbtn;
Button backbtn;
Button scorebtn;


public void fpb_initialized() {
  strokeWeight(1); // optional
  textFont(createFont("fpb_assets/pixel-bit-advanced.ttf", 15));
  textMode(SHAPE);
  cursor(HAND);
  
  flappyBird = new FlappyBird();
  display = new Display();
  ground = new Ground();
  bird = new Bird();
  score = new Score();
  
  rstbtn = new Button(width / 2 + 10, height / 2, 140, 40, 10);
  addsbtn = new Button(width / 2 - 150, height / 2, 150, 40, 10);
  //hsbtn = new Button(width / 2 - 150, height / 2 + 50, 160, 40, 10);
  plybtn = new Button(width / 2 + 10 + 10, height / 2 + 50, 130, 40, 10);
  mmbtn = new Button(width / 2 - 150, height / 2 + 50, 150, 40, 10); 
  extbtn2 = new Button(width / 2 + 10, height / 2 + 50, 140, 40, 10);
  extbtn1 = new Button(width / 2 - 150, height / 2 + 50, 160, 40, 10);
  pausebtn = new Button(display.xScreen + display.screenWidth - 35, 15, 22, 22, 8);
  backbtn = new Button(display.xScreen + 90, 430, 150, 40, 10);
  scorebtn = new Button(display.xScreen + 270, 430, 150, 40, 10);;
  
  pipes = new Pipes[flappyBird.manyPipes];
  pipesInitialized();
}

public void fpb_deInitialized() {
  noStroke(); // optional
  cursor(ARROW);
  
  flappyBird = null;
  display = null;
  ground = null;
  bird = null;
  score = null;
  
  rstbtn = null;
  addsbtn = null;
  hsbtn = null;
  plybtn = null;
  extbtn2 = null;
  extbtn1 = null;
  pausebtn = null;
  backbtn = null;
  scorebtn = null;
  
  pipes = null;
}

public void setup() {
  //size(400, 600, P2D);
  /* size commented out by preprocessor */;
  
  fpb_initialized();
}

public void draw() {
  flappy_bird_game();
}

public void mousePressed() {
  fpb_mousePressed();
}

public void mouseReleased() {
  fpb_mouseReleased();
}

public void keyPressed() {
  fpb_keyPressed();
}

public void keyReleased() {
  fpb_keyReleased();
}

public void flappy_bird_game() {
  flappyBird.update();
  display.renderScreenDisplay();
  
  if (flappyBird.startMenuStage) {
    ground.renderGround();
    bird.renderPlayer();
    display.title();
    
    //hsbtn.renderButton("High Score", 15);
    plybtn.renderButton("Play Game", 15);
    extbtn1.renderButton("Exit Game", 15);
  }
  
  else if (flappyBird.gameplayStage) {
    for (int i = 0; i < flappyBird.manyPipes; i++) {
      pipes[i].update();
    } pipesDisplayRender();
    
    bird.update(score.currentScore);
    score.update();
    ground.renderGround();
  }
  
  else if (flappyBird.restartStage) {
    bird.update(score.currentScore);
    pipesDisplayRender();
    bird.renderPlayer();
    ground.renderGround();
    display.restartMenu(score.currentScore);
    
    mmbtn.renderButton("Main Menu", 15);
    extbtn2.renderButton("Exit Game", 15);
    addsbtn.renderButton("Add Score", 15);
    rstbtn.renderButton("Restart", 15);
  }
  
  else if (flappyBird.saveScoreStage) {
    score.displayInput();
    pipesDisplayRender();
    bird.renderPlayer();
    ground.renderGround();
    image(score.addScoreMenu, display.xScreen + 75, 100, 360, 400);
    //rect(display.xScreen + 75, 100, 360, 400);
    score.displayInput();
    backbtn.renderButton("Back", 15);
    scorebtn.renderButton("Add", 15);
    //rect(display.xScreen + 90, 415, 150, 40);
    //rect(display.xScreen + 270, 415, 150, 40);
  }
   
  //pausebtn.renderButton("| |", 14);
  display.renderBorderDisplay();
}

public void pipesInitialized() {
  for (int i = 0; i < flappyBird.manyPipes; i++) {
    pipes[i] = new Pipes();
  }
  
  int num = PApplet.parseInt(random(50, 1500));
  //println(num);
  
  pipes[0].xTopPipe = display.xScreen + display.screenWidth + num;
  for (int i = 1; i < flappyBird.manyPipes; i++) {
    pipes[i].xTopPipe = pipes[i-1].xTopPipe + pipes[i-1].pipeWidth + pipes[i-1].gapBetweenPipe;
  }
}

public void pipesDisplayRender() {
  for (int i = 0; i < flappyBird.manyPipes; i++) {
     pipes[i].renderPipe();
  }
}

public void fpb_mouseReleased() {
  cursor(HAND);
  if (flappyBird.xMouseCheck && flappyBird.yMouseCheck) {
    
    if (flappyBird.gameplayStage) {
      flappyBird.keyInput[2] = true;
      flappyBird.keyInput[1] = false;
    }
  }
}

public void fpb_mousePressed() {
  cursor(MOVE);
  // Start Menu buttons
  if (flappyBird.startMenuStage) {
    if (plybtn.hoverCheck()) {
      flappyBird.initialState = false;
      flappyBird.gameplayStage = true; 
      flappyBird.startMenuStage = false;
    }
    
    if (extbtn1.hoverCheck()) {
      fpb_deInitialized(); //*CheckPoint
      //menu = 0;
      exit();
      return;
    }
  }
  
  // Restart Menu buttons
  else if (flappyBird.restartStage) {
    if (rstbtn.hoverCheck()) {
      bird.playerInitialState();
      score.scoreInitialState();
      pipesInitialized();
      
      flappyBird.initialState = false;
      flappyBird.gameplayStage = true;
      flappyBird.restartStage = false;
    }
    
    if (addsbtn.hoverCheck()) {
      flappyBird.restartStage = false;
      flappyBird.saveScoreStage = true;
    }
    
    if (mmbtn.hoverCheck()) {
      bird.playerInitialState();
      score.scoreInitialState();
      pipesInitialized();
      
      flappyBird.initialState = false;
      flappyBird.startMenuStage = true;
      flappyBird.restartStage = false;
    }
    
    if (extbtn2.hoverCheck()) {
      fpb_deInitialized(); //*CheckPoint
      //menu = 0;
      exit();
      return;
    }
  }
  
  else if (flappyBird.saveScoreStage) {
    if (backbtn.hoverCheck()) {
      flappyBird.restartStage = true;
      flappyBird.saveScoreStage = false;
    }
    
    if (scorebtn.hoverCheck()) {
      score.saveScore();
      flappyBird.restartStage = true;
      flappyBird.saveScoreStage = false;
    }
  }
  
  // Mouse input buat lompat
  if (flappyBird.xMouseCheck && flappyBird.yMouseCheck) {
    flappyBird.keyInput[1] = true;
    
    if (flappyBird.gameplayStage && !flappyBird.initialState) {
      flappyBird.initialState = true;
    }
  }
}

public void fpb_keyPressed() {
  // if pause menu is off and player press ESC or P
  // then open pause menu
  // ....
    
  if (keyCode == 32) {
    if (flappyBird.startMenuStage) {
      flappyBird.startMenuStage = false;
      flappyBird.gameplayStage = true;
    }
    
    if (flappyBird.gameplayStage) {
      flappyBird.keyInput[0] = true;

      if (!flappyBird.initialState) {
        flappyBird.initialState = true;
      }
    }

    else if (flappyBird.restartStage) {
      bird.playerInitialState();
      score.scoreInitialState();
      pipesInitialized();
      
      bird.player_gravity = -11;
      flappyBird.initialState = true;
      flappyBird.gameplayStage = true;
      flappyBird.restartStage = false;
    }
  }
  
  if (flappyBird.saveScoreStage) {
    score.pressBoard();
    
  }
}

public void fpb_keyReleased() {
  score.keyInputs[keyCode] = false;
  
  if (keyCode == 32)
    flappyBird.keyInput[0] = false;
}
class Display {
  float xScreen;
  float yScreen;
  float screenWidth;
  float screenHeight;
  
  float xbg1;
  float ybg1;
  float xbg2;
  float ybg2;
  PImage bg;
  PImage scr;
  
  Display() {
    displayInitialState();
  }
  
  public void optionMenu() {
    rect(xScreen + screenWidth - 35, 15, 22, 22, 8);
  }
  
  public void title() {
    fill(255);
    textSize(45);
    text("FLAPPY BIRD", width / 2 - textWidth("FLAPPY BIRD") / 2, height / 2 - 180);
  }
  
  public void restartMenu(int score) {
    fill(240);
    image(scr, width / 2 - 112, height / 2 - 120, 225, 80);
    
    fill(0);
    textSize(35);
    text(str(score), width / 2 - textWidth(str(score)) / 2, height / 2 - 65);
    fill(255);
    //rect(width / 2 - 112, height / 2 - 120, 225, 80, 10);
    fill(255);
  }

  public void displayInitialState() {
    this.screenWidth = 500;
    this.screenHeight = height;
    this.xScreen = width / 2 - screenWidth / 2;
    this.yScreen = height;
    this.bg = loadImage("fpb_assets/bg.png");
    this.xbg1 = xScreen;
    this.xbg2 = xScreen + screenWidth;
    this.scr = loadImage("fpb_assets/menu.png");
  }
  
  public void renderScreenDisplay() {
    if (flappyBird.gameplayStage || flappyBird.startMenuStage) {
      xbg1 -= 0.5f;
      xbg2 -= 0.5f;
    }
  
    if (xbg1 <= xScreen - screenWidth) {
      xbg1 = xScreen + screenWidth;
    }
    
    if (xbg2 <= xScreen - screenWidth) {
      xbg2 = xScreen + screenWidth;
    }
    
    image(bg, xbg1, ybg1);
    image(bg, xbg2, ybg2);
  }
  
  public void renderBorderDisplay() {
    fill(0);
    rect(0, 0, xScreen, height);
    rect(xScreen + screenWidth, 0, width - xScreen + screenWidth, height);
    fill(255);
  }
}

class Button {
  float x;
  float y;
  float btnWidth;
  float btnHeight;
  float roundness;
  PImage img;
  
  Button(float x, float y, float btnWidth, float btnHeight, float roundness) {
    this.x = x;
    this.y = y;
    this.btnWidth = btnWidth;
    this.btnHeight = btnHeight;
    this.roundness = roundness;
    this.img = loadImage("fpb_assets/button.png");;
  }
  
  public boolean hoverCheck() {
    return (mouseX >= x && mouseX <= x + btnWidth) && (mouseY >= y && mouseY <= y + btnHeight);
  }
  
  public void renderButton(String texts, int fontSize) {
    image(img, x, y, btnWidth, btnHeight);
    //rect(x, y, btnWidth, btnHeight, 10);
    
    fill(0);
    textSize(fontSize);
    textAlign(LEFT);
    text(texts, PApplet.parseInt(PApplet.parseInt(x + btnWidth / 2) - PApplet.parseInt(textWidth(texts) / 2)), PApplet.parseInt(PApplet.parseInt(y + btnHeight / 2) + PApplet.parseInt(fontSize / 2 - 2)));
    fill(255);
  
    if (hoverCheck()) {
      fill(0, 100);
      rect(x, y, btnWidth, btnHeight, 10);
      fill(255);
    }
  }
}
class Ground {
  float xGround;
  float yGround;
  float groundWidth ;
  float groundHeight;
  PImage ground;
  
  float x1;
  float y1;
  float x2;
  float y2;
  float tHeight;
  
  Ground() {
    groundInitialState();
  }
  
  public void groundInitialState() {
    this.xGround = display.xScreen;
    this.yGround = height - 80;
    this.groundWidth = display.screenWidth;
    this.groundHeight = height - yGround;
    
    this.x1 = xGround;
    this.y1 = yGround;
    this.x2 = xGround + groundWidth;
    this.y2 = yGround;
    this.tHeight = 15;
    this.ground = loadImage("fpb_assets/ground.png");
  }
  
  public void renderGrass() {
    if (flappyBird.gameplayStage || flappyBird.startMenuStage) {
      x1 -= pipes[0].pipeSpeed;
      x2 -= pipes[0].pipeSpeed;
    }
  
    if (x1 <= xGround - groundWidth) {
      x1 = xGround + groundWidth;
    }
    
    if (x2 <= xGround - groundWidth) {
      x2 = xGround + groundWidth;
    }
    
    fill(255, 0, 0);
    //rect(x1, y1, groundWidth, tHeight);
    image(ground, x1, y1, groundWidth, groundHeight);
    fill(0, 0, 255);
    //rect(x2, y2, groundWidth, tHeight);
    image(ground, x2, y2, groundWidth, groundHeight);
    fill(255);
  }
  
  public void renderGround() {
    //image(ground, xGround, yGround, groundWidth, groundHeight);
    //rect(xGround, yGround, groundWidth, groundHeight);
    renderGrass();
  }
}
class Pipes {
  float xTopPipe;
  float yTopPipe;
  float xBottomPipe;
  float yBottomPipe;
  float pipeTopHeigth;
  float pipeBottomHeigth;
  final float pipeSpeed = 2;
  final float pipeWidth = 80;
  final float gapPipeHeight = 140;
  final float gapBetweenPipe = 220;
  PImage topHeadPimg;
  PImage btmHeadPimg;
  PImage pipeImg;
  
  Pipes() {
    pipeInitialState();
  }
  
  public void update() {
    xTopPipe -= pipeSpeed;
    xBottomPipe = xTopPipe;
    
    if (xTopPipe + pipeWidth <= (pipes[0].gapBetweenPipe + pipes[0].pipeWidth) * flappyBird.manyPipes + pipes[0].pipeWidth - (display.xScreen + display.screenWidth)) {
      pipeInitialState();
      
      xTopPipe = display.xScreen + display.screenWidth;
      xBottomPipe = xTopPipe;
    }
  }
   
  public void pipeInitialState() {
    final float invsTopPipe = -100;
    
    this.pipeTopHeigth = random(40 - invsTopPipe, 380);
    this.pipeBottomHeigth = height - (pipeTopHeigth + invsTopPipe + gapPipeHeight + ground.groundHeight);
    this.xTopPipe = 400;
    this.yTopPipe = invsTopPipe;
    this.xBottomPipe = xTopPipe;
    this.yBottomPipe = pipeTopHeigth + invsTopPipe + gapPipeHeight;
    this.topHeadPimg = loadImage("fpb_assets/topHeadPipe.png");
    this.btmHeadPimg = loadImage("fpb_assets/bottomHeadPipe.png");
    this.pipeImg = loadImage("fpb_assets/bodyPipe.png");
  }
  
  public void renderPipe() {
    //rect(xTopPipe, yTopPipe, pipeWidth, pipeTopHeigth);
    image(pipeImg, xTopPipe, yTopPipe, pipeWidth, pipeTopHeigth - 40);
    image(topHeadPimg, xTopPipe - 5, yTopPipe + pipeTopHeigth - 40, pipeWidth + 10, 40);
    
    
    //rect(xBottomPipe, yBottomPipe, pipeWidth, pipeBottomHeigth);
    image(pipeImg, xBottomPipe, yBottomPipe + 40, pipeWidth, pipeBottomHeigth - 40);
    image(btmHeadPimg, xTopPipe - 5, yBottomPipe, pipeWidth + 10, 40);
  }
}
class Bird {
  float xCoor;
  float yCoor;
  float playerWidth;
  float playerHeight;
  float player_gravity;
  PImage burung = loadImage("fpb_assets/bird.png");
  
  Bird() {
    playerInitialState();
  }
  
  public void update(int indexPipe) {
    movementUpdatePlayer();
    groundCollisionPlayer();
    pipesCollisionPlayer(indexPipe % flappyBird.manyPipes);
    renderPlayer();
  }
  
  public void movementUpdatePlayer() {
    if (flappyBird.initialState && player_gravity < 10) 
      player_gravity += 1;
    
    if (flappyBird.gameplayStage && flappyBird.keyInput[0]) {
      player_gravity = -8;
    }
    
    if (flappyBird.gameplayStage && (flappyBird.keyInput[2] && flappyBird.keyInput[1])) {
      player_gravity = -11;
      flappyBird.keyInput[2] = false;
    }
    
    if (yCoor - playerHeight / 2 <= -playerHeight) {
      yCoor = -playerHeight / 2;
    }
      
    if (flappyBird.initialState) {
      yCoor += player_gravity;
    }
  }
  
  boolean deathFlag;
  public void groundCollisionPlayer() {
    if (yCoor + playerWidth / 2 > ground.yGround) {
      if (deathFlag)
        player_gravity = -11;
        
      flappyBird.restartStage = true;
      flappyBird.gameplayStage = false;
      deathFlag = false;
    }
  }
  
  public void pipesCollisionPlayer(int index) {
    float a = playerWidth / 2;
    float b = playerHeight / 2;
    float xCenter = xCoor;
    float yCenter = yCoor;
    float xClosest = max(pipes[index].xTopPipe, min(xCenter, pipes[index].xTopPipe + pipes[index].pipeWidth));
    float yClosest = max(pipes[index].yTopPipe, min(yCenter, pipes[index].yTopPipe + pipes[index].pipeTopHeigth));
    
    float distanceX = xCenter - xClosest;
    float distanceY = yCenter - yClosest;
      
    if ((pow(distanceX, 2) / pow(a, 2)) + (pow(distanceY, 2) / pow(b, 2)) <= 1) {
      if (deathFlag)
        player_gravity = -11;
        
      flappyBird.restartStage = true;
      flappyBird.gameplayStage = false;
      deathFlag = false;
    }
    
    xClosest = max(pipes[index].xBottomPipe, min(xCenter, pipes[index].xBottomPipe + pipes[index].pipeWidth));
    yClosest = max(pipes[index].yBottomPipe, min(yCenter, pipes[index].yBottomPipe + pipes[index].pipeBottomHeigth));
    
    distanceX = xCenter - xClosest;
    distanceY = yCenter - yClosest;
      
    if ((pow(distanceX, 2) / pow(a, 2)) + (pow(distanceY, 2) / pow(b, 2)) <= 1) {
      if (deathFlag)
        player_gravity = -11;
        
      flappyBird.restartStage = true;
      flappyBird.gameplayStage = false;
      deathFlag = false;
    }
  }
  
  public void playerInitialState() {
    this.xCoor = width / 2 - 60;
    this.yCoor = (height - ground.groundHeight) / 2 - 50;
    this.playerWidth = 50;
    this.playerHeight = 40;
    this.player_gravity = 0;
    this.deathFlag = true;
  }
  
  public void renderPlayer() {
     //ellipse(xCoor, yCoor, playerWidth, playerHeight);
    image(burung, xCoor - 35, yCoor - 30, playerWidth + 20, playerHeight + 20);
  }
}
class Score {
  int currentScore;
  PImage addScoreMenu = loadImage("fpb_assets/menu.png");
  JSONObject flappyScore;
  
  String str = "";
  
  boolean[] keyInputs = new boolean[256];
  
  int blinkingInterval = 800;
  int lastToggleTime = 0;
  boolean blinkFlag = true;
  
  Score() {
    scoreInitialState();
  }
  
  public void update() {
    for (int i = 0; i < flappyBird.manyPipes; i++) {
      if ((bird.xCoor - bird.playerWidth / 2) >= (pipes[i].xTopPipe + pipes[i].pipeWidth -1) && (bird.xCoor - bird.playerWidth / 2) <= (pipes[i].xTopPipe + pipes[i].pipeWidth)) {
        currentScore += 1;
        break;
      }
    }
    
    renderCurrentScore();
  }
  
  public void displayInput() {
    int elapsedTime = millis() - lastToggleTime;

    if (elapsedTime >= blinkingInterval) {
      if (blinkFlag)
        blinkFlag = false;
      else
        blinkFlag = true;
      
      lastToggleTime = millis();
    }
    
    if (blinkFlag) {
      rect(20.5f + textWidth(str), 10, 0.2f, 30);
    }
    
    if (str.length() > 5) {
      str = str.substring(0, 5);
    }
    
    fill(0);
    textSize(35);
    text(str, display.xScreen + 180, 250);
    fill(255);
  }
  
  public void pressBoard() {
    keyInputs[keyCode] = true;
    
    if (keyPressed) {
      if (str.length() > 0 && keyCode == 8) {
         str = str.substring(0, str.length() - 1);
      }
      
      if (key > 31 && key < 127)
        str += key;
    } 
  }
  
  public void saveScore() {
     if (str.length() > 0) {
      flappyScore.setInt(str, PApplet.parseInt(currentScore));
      saveJSONObject(flappyScore, "data/flappy.json");

      str = "";
      return;
    }

    if (str.length() > 0) {
      str = str.substring(0, str.length() - 1);
    }
  }
  
  public void scoreInitialState() {
    this.currentScore = 0;
  }
  
  public void renderCurrentScore() {
    fill(255);
    textSize(35);
    text(str(currentScore), PApplet.parseInt(width / 2 - textWidth(str(currentScore)) / 2), 65);
  }
}


  public void settings() { size(1368, 672, P2D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "fpb_main" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
